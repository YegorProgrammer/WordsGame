document.addEventListener('DOMContentLoaded', init);

// ===================================================================
// 1. –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
// ===================================================================
let dictionary = {};
let ui, audio, recognition, jsConfetti;

let isGameRunning = false;
let isListening = false;
let isSpeaking = false;
let hintCooldown = false;

let usedWords = new Set();
let lastSpoken = {};
let lastLetter = '';

// ===================================================================
// 2. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ù–ê–°–¢–†–û–ô–ö–ê
// ===================================================================
async function init() {
    try {
        const response = await fetch('dictionary.json');
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        dictionary = await response.json();
        setup();
    } catch (error) {
        document.getElementById('status').textContent = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤–∞—Ä—è.";
    }
}

function setup() {
    ui = { /* ... */ };
    Object.assign(ui, { startButton: document.getElementById('startButton'), endButton: document.getElementById('endButton'), pauseButton: document.getElementById('pauseButton'), hintButton: document.getElementById('hintButton'), statusDiv: document.getElementById('status'), sphere: document.getElementById('sphere'), loadingOverlay: document.getElementById('loading-overlay') });
    audio = { /* ... */ };
    Object.assign(audio, { music: document.getElementById('audio-music'), correct: document.getElementById('audio-correct'), error: document.getElementById('audio-error'), hint: document.getElementById('audio-hint'), win: document.getElementById('audio-win'), milestone: document.getElementById('audio-milestone') });
    audio.music.volume = 0.1;
    Object.keys(audio).forEach(key => { if (key !== 'music') audio[key].volume = 0.4; });
    
    const SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;
    recognition = new SpeechRecognition();
    recognition.lang = 'ru-RU';
    
    // –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –¥–ª—è –º–µ—Ö–∞–Ω–∏–∫–∏ "push-to-talk".
    recognition.continuous = false;
    recognition.interimResults = false;
    
    recognition.onresult = handleRecognitionResult;
    recognition.onend = () => { isListening = false; }; // onend —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ –º—ã –±–æ–ª—å—à–µ –Ω–µ —Å–ª—É—à–∞–µ–º.
    recognition.onerror = handleRecognitionError;

    jsConfetti = new JSConfetti();

    ui.startButton.addEventListener('click', startGame);
    ui.pauseButton.addEventListener('click', togglePause);
    ui.hintButton.addEventListener('click', provideHint);
    ui.endButton.addEventListener('click', confirmEndGame);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Å—Ñ–µ—Ä—É –¥–ª—è "push-to-talk"
    ui.sphere.addEventListener('mousedown', handleSpherePress);
    ui.sphere.addEventListener('mouseup', handleSphereRelease);
    ui.sphere.addEventListener('touchstart', handleSpherePress, { passive: true });
    ui.sphere.addEventListener('touchend', handleSphereRelease);
    
    setSphereAnimation('idle');
    ui.loadingOverlay.style.opacity = '0';
    setTimeout(() => ui.loadingOverlay.style.display = 'none', 500);
}

// ===================================================================
// 3. –û–°–ù–û–í–ù–ê–Ø –ò–ì–†–û–í–ê–Ø –õ–û–ì–ò–ö–ê
// ===================================================================

function setSphereAnimation(className) {
    ui.sphere.className = className || 'idle';
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è "push-to-talk"
function handleSpherePress() {
    // –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ–π—á–∞—Å —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞ (–∏–≥—Ä–∞ –∏–¥–µ—Ç, –∫–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç)
    if (isGameRunning && !isSpeaking && !isListening && ui.sphere.classList.contains('waiting-for-user')) {
        startListening();
    }
}

function handleSphereRelease() {
    if (isListening) {
        stopListening();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏–≥—Ä–æ–∫–∞
function waitForPlayerInput() {
    stopListening(); // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    setSphereAnimation('waiting-for-user');
    ui.statusDiv.textContent = '–í–∞—à —Ö–æ–¥. –ó–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≥–æ–≤–æ—Ä–∏—Ç—å.';
}

function speak(text, callback) {
    if (isSpeaking) return;
    stopListening();
    isSpeaking = true;
    setSphereAnimation('idle'); // –°—Ñ–µ—Ä–∞ –≤ idle, –ø–æ–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä

    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'ru-RU'; utterance.rate = 1.1; utterance.volume = 1.0;
    utterance.onend = () => {
        setTimeout(() => {
            isSpeaking = false;
            if (callback) callback();
        }, 300); // –ü–µ—Ä–∏–æ–¥ —Ç–∏—à–∏–Ω—ã
    };
    window.speechSynthesis.speak(utterance);
}

function startListening() {
    if (!isGameRunning || isSpeaking || isListening) return;
    isListening = true;
    // –ü—Ä–∏ —É–¥–µ—Ä–∂–∞–Ω–∏–∏ –≤–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é "listening" –¥–ª—è –ª—É—á—à–µ–≥–æ UX
    setSphereAnimation('listening'); 
    ui.statusDiv.textContent = '–°–ª—É—à–∞—é... –û—Ç–ø—É—Å—Ç–∏—Ç–µ, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.';
    try { recognition.start(); } catch (e) { isListening = false; }
}

function stopListening() {
    if (isListening) {
        recognition.stop(); // –≠—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–∑–æ–≤–µ—Ç onend
    }
}

function computerTurn() {
    stopListening();
    setSphereAnimation('thinking');
    ui.statusDiv.textContent = '–î—É–º–∞—é...';
    
    setTimeout(() => {
        if (!isGameRunning) return;
        const availableWords = (dictionary[lastLetter] || []).filter(w => !usedWords.has(w));
        if (availableWords.length === 0) { handleWin('player'); return; }
        
        const word = availableWords[Math.floor(Math.random() * availableWords.length)];
        processNewWord(word, 'computer');
        // –ü–æ—Å–ª–µ —Ö–æ–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –∏–≥—Ä–æ–∫–∞, –∞ –Ω–µ —Å–ª—É—à–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        checkMilestone(() => speak(word, waitForPlayerInput));
    }, 1200);
}

function handleRecognitionResult(event) {
    const result = event.results[event.results.length - 1][0];
    
    // –ü–æ—Å–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å—Ç–∞–≤–∏–º —Å—Ñ–µ—Ä—É –≤ idle, –ø–æ–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    setSphereAnimation('idle');
    ui.statusDiv.textContent = '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—Ç–≤–µ—Ç...';
    
    console.log(result.confidence)
    if (result.confidence < 0.7) {
        console.log(`–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${result.confidence.toFixed(2)}. –ò–≥–Ω–æ—Ä–∏—Ä—É—é.`);
        handleMistake("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        return;
    }

    if (isSpeaking) return;

    const userWord = result.transcript.trim().toLowerCase().replace('.', '');
    if (userWord.split(' ').length > 1) {
        return;
    }
    
    if (usedWords.has(userWord)) { handleMistake("–¢–∞–∫–æ–µ —Å–ª–æ–≤–æ —É–∂–µ –±—ã–ª–æ."); return; }
    
    if (userWord.charAt(0) !== lastLetter) {
        handleMistake(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –±—É–∫–≤—É '${lastLetter}'.`);
        return;
    }
    
    audio.correct.play();
    processNewWord(userWord, 'player');
    checkMilestone(computerTurn);
}

function handleMistake(message) {
    stopListening();
    audio.error.play();
    setSphereAnimation('effect-error');
    // –ü–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –∏–≥—Ä–æ–∫–∞
    speak(message, waitForPlayerInput);
}

function provideHint() {
    if (!isGameRunning || hintCooldown || isSpeaking) return;
    stopListening();
    hintCooldown = true;
    ui.hintButton.disabled = true;
    
    audio.hint.play();
    setSphereAnimation('effect-hint');
    
    const hintWords = (dictionary[lastLetter] || []).filter(w => !usedWords.has(w));
    const message = hintWords.length > 0 ? `–í–æ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∞: ${hintWords[0]}` : `–£ –º–µ–Ω—è –Ω–µ—Ç –ø–æ–¥—Å–∫–∞–∑–æ–∫!`;
    
    // –ü–æ—Å–ª–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –∏–≥—Ä–æ–∫–∞
    speak(message, waitForPlayerInput);
    setTimeout(() => { hintCooldown = false; if (isGameRunning) ui.hintButton.disabled = false; }, 5000);
}

function handleWin(winner) {
    const wasRunning = isGameRunning;
    endGame();
    if (!wasRunning) return;
    
    jsConfetti.addConfetti({ emojis: ['üèÜ', '‚ú®', 'ü•á'] });
    audio.win.play();
    setSphereAnimation('effect-win');
    ui.sphere.style.cursor = 'default'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä
    const message = winner === 'player' ? "–ú–Ω–µ –Ω–µ—á–µ–≥–æ —Å–∫–∞–∑–∞—Ç—å. –¢–≤–æ—è –ø–æ–±–µ–¥–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!" : "–Ø –ø–æ–±–µ–¥–∏–ª! –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑—ë—Ç!";
    ui.statusDiv.textContent = message;
    speak(message, resetUI);
}

// ===================================================================
// 4. –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ì–†–û–ô –ò –ö–ù–û–ü–ö–ê–ú–ò
// ===================================================================
function startGame() {
    resetGame();
    isGameRunning = true;
    
    ui.startButton.classList.add('hidden');
    [ui.pauseButton, ui.hintButton, ui.endButton].forEach(btn => btn.classList.remove('hidden'));
    
    audio.music.play();
    const firstWord = dictionary['–∞'][Math.floor(Math.random() * dictionary['–∞'].length)];
    processNewWord(firstWord, 'computer');
    // –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –∏–≥—Ä–æ–∫–∞
    speak(`–ù–∞—á–∏–Ω–∞–µ–º! –ú–æ–µ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ: ${firstWord}`, waitForPlayerInput);
}

function endGame() {
    isGameRunning = false;
    isSpeaking = false;
    stopListening();
    window.speechSynthesis.cancel();
}

function resetGame() {
    usedWords.clear(); lastSpoken = {}; lastLetter = ''; hintCooldown = false;
    ui.hintButton.disabled = false;
    ui.pauseButton.classList.remove('resume-mode'); ui.pauseButton.textContent = '–ü–∞—É–∑–∞';
    setSphereAnimation('idle');
    ui.sphere.style.cursor = 'default'; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä
}

function resetUI() {
    endGame();
    audio.music.pause(); audio.music.currentTime = 0;
    
    [ui.pauseButton, ui.hintButton, ui.endButton].forEach(btn => { btn.classList.add('hidden'); btn.disabled = false; });
    ui.pauseButton.classList.remove('resume-mode'); ui.pauseButton.textContent = '–ü–∞—É–∑–∞';
    ui.startButton.classList.remove('hidden'); ui.startButton.textContent = "–°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑";
    setSphereAnimation('idle');
    ui.statusDiv.textContent = '–ì–æ—Ç–æ–≤ —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞!';
}

function togglePause() {
    if (!isGameRunning) return;
    const isNowPaused = ui.pauseButton.classList.toggle('resume-mode');
    
    if (isNowPaused) {
        stopListening();
        setSphereAnimation('idle');
        ui.sphere.style.cursor = 'default';
        window.speechSynthesis.cancel();
        audio.music.pause();
        ui.pauseButton.textContent = '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å';
        ui.statusDiv.textContent = '–ò–≥—Ä–∞ –Ω–∞ –ø–∞—É–∑–µ';
    } else {
        audio.music.play();
        ui.pauseButton.textContent = '–ü–∞—É–∑–∞';
        const whoSpoke = lastSpoken.by === 'player' ? '—Ç—ã' : '—è';
        const resumeMessage = `–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º. –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –±—ã–ª–æ "${lastSpoken.word}", –µ–≥–æ —Å–∫–∞–∑–∞–ª ${whoSpoke}.`;
        speak(resumeMessage, () => {
            if (lastSpoken.by === 'player') computerTurn();
            // –ï—Å–ª–∏ –±—ã–ª —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞, –∂–¥–µ–º –µ–≥–æ –≤–≤–æ–¥–∞
            else waitForPlayerInput();
        });
    }
}

function confirmEndGame() {
    if (!isGameRunning || ui.pauseButton.classList.contains('resume-mode')) return;
    togglePause();
    setTimeout(() => {
        if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å—Å—è?")) {
            handleWin('computer');
        } else {
            togglePause();
        }
    }, 100);
}

// ===================================================================
// 5. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò API
// ===================================================================
function processNewWord(word, by) {
    usedWords.add(word);
    lastSpoken = { word, by };
    lastLetter = word.slice(-1);
    const invalidLastChars = ['—å', '—ä', '—ã'];
    if (invalidLastChars.includes(lastLetter)) {
        lastLetter = word.slice(-2, -1);
    }
}

function checkMilestone(nextTurn) {
    if (usedWords.size > 0 && usedWords.size % 25 === 0) {
        setSphereAnimation('effect-milestone');
        jsConfetti.addConfetti({ emojis: ['üéâ', 'üéä', 'üéà'] });
        audio.milestone.play();
        speak(`–£—Ö —Ç—ã, —É–∂–µ ${usedWords.size} —Å–ª–æ–≤!`, nextTurn);
    } else {
        nextTurn();
    }
}

function handleRecognitionError(e) {
    isListening = false;
    // –ù–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞–Ω–∏–µ, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞.
    if (e.error === 'no-speech' || e.error === 'audio-capture') {
        waitForPlayerInput();
    }
    console.error(`–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: ${e.error}`);
}